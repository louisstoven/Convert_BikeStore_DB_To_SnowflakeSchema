-- Retrieve each customer's total spending, including their name and email, sorted by highest spending
SELECT c.FirstName, c.LastName, c.Email, SUM(p.TotalAmount) AS TotalSpent
FROM Customers c
JOIN Purchases p ON c.CustomerID = p.CustomerID
GROUP BY c.CustomerID
ORDER BY TotalSpent DESC;

-- Find the top 3 most popular products based on the total quantity sold
SELECT pd.ProductID, pr.Name, SUM(pd.Quantity) AS TotalQuantitySold
FROM PurchaseDetails pd
JOIN Products pr ON pd.ProductID = pr.ProductID
GROUP BY pd.ProductID
ORDER BY TotalQuantitySold DESC
LIMIT 3;

-- Calculate the percentage of products in each category that are low on stock (defined as below 10 units)
SELECT Category, 
       COUNT(*) AS TotalProducts,
       SUM(CASE WHEN StockQuantity < 10 THEN 1 ELSE 0 END) * 100.0 / COUNT(*) AS LowStockPercentage
FROM Products
GROUP BY Category;

-- Find all customers who have made a purchase within the last 6 months and list the number of purchases they made
SELECT c.CustomerID, c.FirstName, c.LastName, COUNT(p.PurchaseID) AS PurchaseCount
FROM Customers c
JOIN Purchases p ON c.CustomerID = p.CustomerID
WHERE p.PurchaseDate >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
GROUP BY c.CustomerID
HAVING PurchaseCount > 1
ORDER BY PurchaseCount DESC;


-- List products that have been sold more than their current stock quantity
SELECT pr.ProductID, pr.Name, pr.StockQuantity, SUM(pd.Quantity) AS QuantitySold
FROM Products pr
JOIN PurchaseDetails pd ON pr.ProductID = pd.ProductID
GROUP BY pr.ProductID
HAVING QuantitySold > pr.StockQuantity;

-- Retrieve the total revenue generated per product category
SELECT pr.Category, SUM(p.TotalAmount) AS TotalRevenue
FROM Products pr
JOIN PurchaseDetails pd ON pr.ProductID = pd.ProductID
JOIN Purchases p ON pd.PurchaseID = p.PurchaseID
GROUP BY pr.Category
ORDER BY TotalRevenue DESC;

-- Calculate the average delivery time in days for each customer
SELECT c.CustomerID, c.FirstName, c.LastName, 
       AVG(DATEDIFF(d.DeliveryDate, p.PurchaseDate)) AS AvgDeliveryDays
FROM Delivery d
JOIN Purchases p ON d.PurchaseID = p.PurchaseID
JOIN Customers c ON p.CustomerID = c.CustomerID
GROUP BY c.CustomerID
ORDER BY AvgDeliveryDays;


-- Find the month with the highest sales revenue in the past year
SELECT MONTHNAME(p.PurchaseDate) AS Month, SUM(p.TotalAmount) AS MonthlyRevenue
FROM Purchases p
WHERE p.PurchaseDate >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
GROUP BY Month
ORDER BY MonthlyRevenue DESC
LIMIT 1;

-- List each supplier's top-selling product and the total sales amount for that product
SELECT s.SupplierID, s.Name AS SupplierName, 
       pr.Name AS TopProduct, 
       SUM(pd.Quantity * pr.Price) AS TotalSales
FROM Suppliers s
JOIN Supplies sp ON s.SupplierID = sp.SupplierID
JOIN Products pr ON sp.ProductID = pr.ProductID
JOIN PurchaseDetails pd ON pr.ProductID = pd.ProductID
GROUP BY s.SupplierID, pr.ProductID
ORDER BY s.SupplierID, TotalSales DESC;


-- Identify customers who have purchased both mountain bikes and road bikes
SELECT c.CustomerID, c.FirstName, c.LastName
FROM Customers c
JOIN Purchases p ON c.CustomerID = p.CustomerID
JOIN PurchaseDetails pd ON p.PurchaseID = pd.PurchaseID
JOIN Products pr ON pd.ProductID = pr.ProductID
WHERE pr.Name IN ('Mountain Bike', 'Road Bike')
GROUP BY c.CustomerID, c.FirstName, c.LastName
HAVING COUNT(DISTINCT pr.Name) = 2;


-- List all products with their stock quantity, sales quantity, and the difference between the two
SELECT pr.ProductID, pr.Name, pr.StockQuantity, 
       COALESCE(SUM(pd.Quantity), 0) AS TotalSold, 
       (pr.StockQuantity - COALESCE(SUM(pd.Quantity), 0)) AS StockDifference
FROM Products pr
LEFT JOIN PurchaseDetails pd ON pr.ProductID = pd.ProductID
GROUP BY pr.ProductID;

-- Find the total amount spent by customers who have made repairs on their products
SELECT c.CustomerID, c.FirstName, c.LastName, SUM(p.TotalAmount) AS TotalSpent
FROM Customers c
JOIN Purchases p ON c.CustomerID = p.CustomerID
WHERE c.CustomerID IN (SELECT DISTINCT CustomerID FROM Repairs)
GROUP BY c.CustomerID
ORDER BY TotalSpent DESC;

-- Get each productâ€™s minimum, average, and maximum sale quantity across all purchases
SELECT pr.ProductID, pr.Name,
       MIN(pd.Quantity) AS MinQuantitySold,
       AVG(pd.Quantity) AS AvgQuantitySold,
       MAX(pd.Quantity) AS MaxQuantitySold
FROM Products pr
JOIN PurchaseDetails pd ON pr.ProductID = pd.ProductID
GROUP BY pr.ProductID;


-- Retrieve the number of repairs needed per year for each product category
SELECT pr.Category, YEAR(r.RepairDate) AS RepairYear, COUNT(r.RepairID) AS RepairCount
FROM Products pr
JOIN PurchaseDetails pd ON pr.ProductID = pd.ProductID
JOIN Purchases p ON pd.PurchaseID = p.PurchaseID
JOIN Repairs r ON p.CustomerID = r.CustomerID
GROUP BY pr.Category, RepairYear
ORDER BY RepairYear DESC;


-- Determine the percentage of revenue generated by each product in its category
SELECT pr.Category, pr.Name, 
       SUM(pd.Quantity * pr.Price) AS ProductRevenue,
       SUM(pd.Quantity * pr.Price) * 100.0 / SUM(SUM(pd.Quantity * pr.Price)) OVER (PARTITION BY pr.Category) AS RevenuePercentage
FROM Products pr
JOIN PurchaseDetails pd ON pr.ProductID = pd.ProductID
GROUP BY pr.Category, pr.Name
ORDER BY pr.Category, RevenuePercentage DESC;

-- Find the top 3 states by customer count and the total purchases made by customers in those states
SELECT c.State, COUNT(c.CustomerID) AS CustomerCount, SUM(p.TotalAmount) AS TotalPurchases
FROM Customers c
JOIN Purchases p ON c.CustomerID = p.CustomerID
GROUP BY c.State
ORDER BY CustomerCount DESC
LIMIT 3;

-- Retrieve each product's stock and the average number of units sold per sale, ordered by highest average units sold
SELECT pr.ProductID, pr.Name, pr.StockQuantity, 
       AVG(pd.Quantity) AS AvgUnitsPerSale
FROM Products pr
JOIN PurchaseDetails pd ON pr.ProductID = pd.ProductID
GROUP BY pr.ProductID
ORDER BY AvgUnitsPerSale DESC;

-- Calculate the total sales revenue per product and display products where revenue exceeds $1,000
SELECT pr.ProductID, pr.Name, SUM(pd.Quantity * pr.Price) AS TotalRevenue
FROM Products pr
JOIN PurchaseDetails pd ON pr.ProductID = pd.ProductID
GROUP BY pr.ProductID
HAVING TotalRevenue > 1000
ORDER BY TotalRevenue DESC;